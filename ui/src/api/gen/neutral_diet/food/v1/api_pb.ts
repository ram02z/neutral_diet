// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file neutral_diet/food/v1/api.proto (package neutral_diet.food.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {FoodItemLog} from "./food_item_log_pb.js";
import {AggregateFoodItem, FoodItem} from "./food_item_pb.js";

/**
 * @generated from message neutral_diet.food.v1.CreateFoodItemRequest
 */
export class CreateFoodItemRequest extends Message<CreateFoodItemRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: float emissions = 2;
   */
  emissions = 0;

  /**
   * @generated from field: int32 typology_id = 3;
   */
  typologyId = 0;

  /**
   * @generated from field: int32 source_id = 4;
   */
  sourceId = 0;

  constructor(data?: PartialMessage<CreateFoodItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.CreateFoodItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "emissions", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "typology_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "source_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFoodItemRequest {
    return new CreateFoodItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFoodItemRequest {
    return new CreateFoodItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFoodItemRequest {
    return new CreateFoodItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFoodItemRequest | PlainMessage<CreateFoodItemRequest> | undefined, b: CreateFoodItemRequest | PlainMessage<CreateFoodItemRequest> | undefined): boolean {
    return proto3.util.equals(CreateFoodItemRequest, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.CreateFoodItemResponse
 */
export class CreateFoodItemResponse extends Message<CreateFoodItemResponse> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<CreateFoodItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.CreateFoodItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFoodItemResponse {
    return new CreateFoodItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFoodItemResponse {
    return new CreateFoodItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFoodItemResponse {
    return new CreateFoodItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFoodItemResponse | PlainMessage<CreateFoodItemResponse> | undefined, b: CreateFoodItemResponse | PlainMessage<CreateFoodItemResponse> | undefined): boolean {
    return proto3.util.equals(CreateFoodItemResponse, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.CreateTypologyRequest
 */
export class CreateTypologyRequest extends Message<CreateTypologyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string sub_typologies = 2;
   */
  subTypologies: string[] = [];

  constructor(data?: PartialMessage<CreateTypologyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.CreateTypologyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_typologies", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTypologyRequest {
    return new CreateTypologyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTypologyRequest {
    return new CreateTypologyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTypologyRequest {
    return new CreateTypologyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTypologyRequest | PlainMessage<CreateTypologyRequest> | undefined, b: CreateTypologyRequest | PlainMessage<CreateTypologyRequest> | undefined): boolean {
    return proto3.util.equals(CreateTypologyRequest, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.CreateTypologyResponse
 */
export class CreateTypologyResponse extends Message<CreateTypologyResponse> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<CreateTypologyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.CreateTypologyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTypologyResponse {
    return new CreateTypologyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTypologyResponse {
    return new CreateTypologyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTypologyResponse {
    return new CreateTypologyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTypologyResponse | PlainMessage<CreateTypologyResponse> | undefined, b: CreateTypologyResponse | PlainMessage<CreateTypologyResponse> | undefined): boolean {
    return proto3.util.equals(CreateTypologyResponse, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.CreateSourceRequest
 */
export class CreateSourceRequest extends Message<CreateSourceRequest> {
  /**
   * @generated from field: string reference = 1;
   */
  reference = "";

  /**
   * @generated from field: optional int32 year = 2;
   */
  year?: number;

  /**
   * @generated from field: optional string location = 3;
   */
  location?: string;

  constructor(data?: PartialMessage<CreateSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.CreateSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "year", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSourceRequest {
    return new CreateSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSourceRequest {
    return new CreateSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSourceRequest {
    return new CreateSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSourceRequest | PlainMessage<CreateSourceRequest> | undefined, b: CreateSourceRequest | PlainMessage<CreateSourceRequest> | undefined): boolean {
    return proto3.util.equals(CreateSourceRequest, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.CreateSourceResponse
 */
export class CreateSourceResponse extends Message<CreateSourceResponse> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<CreateSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.CreateSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSourceResponse {
    return new CreateSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSourceResponse {
    return new CreateSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSourceResponse {
    return new CreateSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSourceResponse | PlainMessage<CreateSourceResponse> | undefined, b: CreateSourceResponse | PlainMessage<CreateSourceResponse> | undefined): boolean {
    return proto3.util.equals(CreateSourceResponse, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.CreateFoodItemLogRequest
 */
export class CreateFoodItemLogRequest extends Message<CreateFoodItemLogRequest> {
  /**
   * @generated from field: neutral_diet.food.v1.FoodItemLog food_item_log = 1;
   */
  foodItemLog?: FoodItemLog;

  constructor(data?: PartialMessage<CreateFoodItemLogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.CreateFoodItemLogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "food_item_log", kind: "message", T: FoodItemLog },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFoodItemLogRequest {
    return new CreateFoodItemLogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFoodItemLogRequest {
    return new CreateFoodItemLogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFoodItemLogRequest {
    return new CreateFoodItemLogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFoodItemLogRequest | PlainMessage<CreateFoodItemLogRequest> | undefined, b: CreateFoodItemLogRequest | PlainMessage<CreateFoodItemLogRequest> | undefined): boolean {
    return proto3.util.equals(CreateFoodItemLogRequest, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.CreateFoodItemLogResponse
 */
export class CreateFoodItemLogResponse extends Message<CreateFoodItemLogResponse> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<CreateFoodItemLogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.CreateFoodItemLogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFoodItemLogResponse {
    return new CreateFoodItemLogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFoodItemLogResponse {
    return new CreateFoodItemLogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFoodItemLogResponse {
    return new CreateFoodItemLogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFoodItemLogResponse | PlainMessage<CreateFoodItemLogResponse> | undefined, b: CreateFoodItemLogResponse | PlainMessage<CreateFoodItemLogResponse> | undefined): boolean {
    return proto3.util.equals(CreateFoodItemLogResponse, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.ListFoodItemsRequest
 */
export class ListFoodItemsRequest extends Message<ListFoodItemsRequest> {
  constructor(data?: PartialMessage<ListFoodItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.ListFoodItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFoodItemsRequest {
    return new ListFoodItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFoodItemsRequest {
    return new ListFoodItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFoodItemsRequest {
    return new ListFoodItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFoodItemsRequest | PlainMessage<ListFoodItemsRequest> | undefined, b: ListFoodItemsRequest | PlainMessage<ListFoodItemsRequest> | undefined): boolean {
    return proto3.util.equals(ListFoodItemsRequest, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.ListFoodItemsResponse
 */
export class ListFoodItemsResponse extends Message<ListFoodItemsResponse> {
  /**
   * @generated from field: repeated neutral_diet.food.v1.FoodItem food_items = 1;
   */
  foodItems: FoodItem[] = [];

  constructor(data?: PartialMessage<ListFoodItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.ListFoodItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "food_items", kind: "message", T: FoodItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFoodItemsResponse {
    return new ListFoodItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFoodItemsResponse {
    return new ListFoodItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFoodItemsResponse {
    return new ListFoodItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFoodItemsResponse | PlainMessage<ListFoodItemsResponse> | undefined, b: ListFoodItemsResponse | PlainMessage<ListFoodItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListFoodItemsResponse, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.ListAggregateFoodItemsRequest
 */
export class ListAggregateFoodItemsRequest extends Message<ListAggregateFoodItemsRequest> {
  constructor(data?: PartialMessage<ListAggregateFoodItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.ListAggregateFoodItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAggregateFoodItemsRequest {
    return new ListAggregateFoodItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAggregateFoodItemsRequest {
    return new ListAggregateFoodItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAggregateFoodItemsRequest {
    return new ListAggregateFoodItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAggregateFoodItemsRequest | PlainMessage<ListAggregateFoodItemsRequest> | undefined, b: ListAggregateFoodItemsRequest | PlainMessage<ListAggregateFoodItemsRequest> | undefined): boolean {
    return proto3.util.equals(ListAggregateFoodItemsRequest, a, b);
  }
}

/**
 * @generated from message neutral_diet.food.v1.ListAggregateFoodItemsResponse
 */
export class ListAggregateFoodItemsResponse extends Message<ListAggregateFoodItemsResponse> {
  /**
   * @generated from field: repeated neutral_diet.food.v1.AggregateFoodItem food_items = 1;
   */
  foodItems: AggregateFoodItem[] = [];

  constructor(data?: PartialMessage<ListAggregateFoodItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.ListAggregateFoodItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "food_items", kind: "message", T: AggregateFoodItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAggregateFoodItemsResponse {
    return new ListAggregateFoodItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAggregateFoodItemsResponse {
    return new ListAggregateFoodItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAggregateFoodItemsResponse {
    return new ListAggregateFoodItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAggregateFoodItemsResponse | PlainMessage<ListAggregateFoodItemsResponse> | undefined, b: ListAggregateFoodItemsResponse | PlainMessage<ListAggregateFoodItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListAggregateFoodItemsResponse, a, b);
  }
}

