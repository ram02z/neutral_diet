// @generated by protoc-gen-es v0.5.0 with parameter "target=ts"
// @generated from file neutral_diet/food/v1/life_cycle.proto (package neutral_diet.food.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message neutral_diet.food.v1.LifeCycle
 */
export class LifeCycle extends Message<LifeCycle> {
  /**
   * @generated from field: double carbon_footprint = 1;
   */
  carbonFootprint = 0;

  /**
   * @generated from field: int32 food_item_id = 2;
   */
  foodItemId = 0;

  /**
   * @generated from field: int32 source_id = 3;
   */
  sourceId = 0;

  constructor(data?: PartialMessage<LifeCycle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.LifeCycle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "carbon_footprint", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "food_item_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "source_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LifeCycle {
    return new LifeCycle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LifeCycle {
    return new LifeCycle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LifeCycle {
    return new LifeCycle().fromJsonString(jsonString, options);
  }

  static equals(a: LifeCycle | PlainMessage<LifeCycle> | undefined, b: LifeCycle | PlainMessage<LifeCycle> | undefined): boolean {
    return proto3.util.equals(LifeCycle, a, b);
  }
}

