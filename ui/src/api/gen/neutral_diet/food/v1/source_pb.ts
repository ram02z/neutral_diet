// @generated by protoc-gen-es v0.5.0 with parameter "target=ts"
// @generated from file neutral_diet/food/v1/source.proto (package neutral_diet.food.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Region } from "./region_pb.js";

/**
 * @generated from message neutral_diet.food.v1.Source
 */
export class Source extends Message<Source> {
  /**
   * @generated from field: string reference = 1;
   */
  reference = "";

  /**
   * @generated from field: int32 year = 2;
   */
  year = 0;

  /**
   * @generated from field: neutral_diet.food.v1.Region region = 3;
   */
  region = Region.UNSPECIFIED;

  constructor(data?: PartialMessage<Source>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.food.v1.Source";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "year", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "region", kind: "enum", T: proto3.getEnumType(Region) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Source {
    return new Source().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Source {
    return new Source().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Source {
    return new Source().fromJsonString(jsonString, options);
  }

  static equals(a: Source | PlainMessage<Source> | undefined, b: Source | PlainMessage<Source> | undefined): boolean {
    return proto3.util.equals(Source, a, b);
  }
}

