// @generated by protoc-gen-es v0.5.0 with parameter "target=ts"
// @generated from file neutral_diet/user/v1/goal.proto (package neutral_diet.user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Date } from "./date_pb.js";

/**
 * @generated from message neutral_diet.user.v1.CarbonFootprintGoalRequest
 */
export class CarbonFootprintGoalRequest extends Message<CarbonFootprintGoalRequest> {
  /**
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * @generated from field: neutral_diet.user.v1.Date start_date = 2;
   */
  startDate?: Date;

  /**
   * @generated from field: neutral_diet.user.v1.Date end_date = 3;
   */
  endDate?: Date;

  /**
   * @generated from field: double start_carbon_footprint = 4;
   */
  startCarbonFootprint = 0;

  /**
   * @generated from field: double target_carbon_footprint = 5;
   */
  targetCarbonFootprint = 0;

  constructor(data?: PartialMessage<CarbonFootprintGoalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.user.v1.CarbonFootprintGoalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_date", kind: "message", T: Date },
    { no: 3, name: "end_date", kind: "message", T: Date },
    { no: 4, name: "start_carbon_footprint", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "target_carbon_footprint", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CarbonFootprintGoalRequest {
    return new CarbonFootprintGoalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CarbonFootprintGoalRequest {
    return new CarbonFootprintGoalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CarbonFootprintGoalRequest {
    return new CarbonFootprintGoalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CarbonFootprintGoalRequest | PlainMessage<CarbonFootprintGoalRequest> | undefined, b: CarbonFootprintGoalRequest | PlainMessage<CarbonFootprintGoalRequest> | undefined): boolean {
    return proto3.util.equals(CarbonFootprintGoalRequest, a, b);
  }
}

/**
 * @generated from message neutral_diet.user.v1.CarbonFootprintGoalResponse
 */
export class CarbonFootprintGoalResponse extends Message<CarbonFootprintGoalResponse> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: neutral_diet.user.v1.Date start_date = 3;
   */
  startDate?: Date;

  /**
   * @generated from field: neutral_diet.user.v1.Date end_date = 4;
   */
  endDate?: Date;

  /**
   * @generated from field: double start_carbon_footprint = 5;
   */
  startCarbonFootprint = 0;

  /**
   * @generated from field: double target_carbon_footprint = 6;
   */
  targetCarbonFootprint = 0;

  constructor(data?: PartialMessage<CarbonFootprintGoalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "neutral_diet.user.v1.CarbonFootprintGoalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_date", kind: "message", T: Date },
    { no: 4, name: "end_date", kind: "message", T: Date },
    { no: 5, name: "start_carbon_footprint", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "target_carbon_footprint", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CarbonFootprintGoalResponse {
    return new CarbonFootprintGoalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CarbonFootprintGoalResponse {
    return new CarbonFootprintGoalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CarbonFootprintGoalResponse {
    return new CarbonFootprintGoalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CarbonFootprintGoalResponse | PlainMessage<CarbonFootprintGoalResponse> | undefined, b: CarbonFootprintGoalResponse | PlainMessage<CarbonFootprintGoalResponse> | undefined): boolean {
    return proto3.util.equals(CarbonFootprintGoalResponse, a, b);
  }
}

