// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: neutral_diet/food/v1/api.proto

package foodv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ram02z/neutral_diet/internal/gen/idl/neutral_diet/food/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FoodServiceName is the fully-qualified name of the FoodService service.
	FoodServiceName = "neutral_diet.food.v1.FoodService"
)

// FoodServiceClient is a client for the neutral_diet.food.v1.FoodService service.
type FoodServiceClient interface {
	CreateFoodItem(context.Context, *connect_go.Request[v1.CreateFoodItemRequest]) (*connect_go.Response[v1.CreateFoodItemResponse], error)
	ListFoodItems(context.Context, *connect_go.Request[v1.ListFoodItemsRequest]) (*connect_go.Response[v1.ListFoodItemsResponse], error)
	ListAggregateFoodItems(context.Context, *connect_go.Request[v1.ListAggregateFoodItemsRequest]) (*connect_go.Response[v1.ListAggregateFoodItemsResponse], error)
	CreateTypology(context.Context, *connect_go.Request[v1.CreateTypologyRequest]) (*connect_go.Response[v1.CreateTypologyResponse], error)
	CreateSource(context.Context, *connect_go.Request[v1.CreateSourceRequest]) (*connect_go.Response[v1.CreateSourceResponse], error)
}

// NewFoodServiceClient constructs a client for the neutral_diet.food.v1.FoodService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFoodServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FoodServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &foodServiceClient{
		createFoodItem: connect_go.NewClient[v1.CreateFoodItemRequest, v1.CreateFoodItemResponse](
			httpClient,
			baseURL+"/neutral_diet.food.v1.FoodService/CreateFoodItem",
			opts...,
		),
		listFoodItems: connect_go.NewClient[v1.ListFoodItemsRequest, v1.ListFoodItemsResponse](
			httpClient,
			baseURL+"/neutral_diet.food.v1.FoodService/ListFoodItems",
			opts...,
		),
		listAggregateFoodItems: connect_go.NewClient[v1.ListAggregateFoodItemsRequest, v1.ListAggregateFoodItemsResponse](
			httpClient,
			baseURL+"/neutral_diet.food.v1.FoodService/ListAggregateFoodItems",
			opts...,
		),
		createTypology: connect_go.NewClient[v1.CreateTypologyRequest, v1.CreateTypologyResponse](
			httpClient,
			baseURL+"/neutral_diet.food.v1.FoodService/CreateTypology",
			opts...,
		),
		createSource: connect_go.NewClient[v1.CreateSourceRequest, v1.CreateSourceResponse](
			httpClient,
			baseURL+"/neutral_diet.food.v1.FoodService/CreateSource",
			opts...,
		),
	}
}

// foodServiceClient implements FoodServiceClient.
type foodServiceClient struct {
	createFoodItem         *connect_go.Client[v1.CreateFoodItemRequest, v1.CreateFoodItemResponse]
	listFoodItems          *connect_go.Client[v1.ListFoodItemsRequest, v1.ListFoodItemsResponse]
	listAggregateFoodItems *connect_go.Client[v1.ListAggregateFoodItemsRequest, v1.ListAggregateFoodItemsResponse]
	createTypology         *connect_go.Client[v1.CreateTypologyRequest, v1.CreateTypologyResponse]
	createSource           *connect_go.Client[v1.CreateSourceRequest, v1.CreateSourceResponse]
}

// CreateFoodItem calls neutral_diet.food.v1.FoodService.CreateFoodItem.
func (c *foodServiceClient) CreateFoodItem(ctx context.Context, req *connect_go.Request[v1.CreateFoodItemRequest]) (*connect_go.Response[v1.CreateFoodItemResponse], error) {
	return c.createFoodItem.CallUnary(ctx, req)
}

// ListFoodItems calls neutral_diet.food.v1.FoodService.ListFoodItems.
func (c *foodServiceClient) ListFoodItems(ctx context.Context, req *connect_go.Request[v1.ListFoodItemsRequest]) (*connect_go.Response[v1.ListFoodItemsResponse], error) {
	return c.listFoodItems.CallUnary(ctx, req)
}

// ListAggregateFoodItems calls neutral_diet.food.v1.FoodService.ListAggregateFoodItems.
func (c *foodServiceClient) ListAggregateFoodItems(ctx context.Context, req *connect_go.Request[v1.ListAggregateFoodItemsRequest]) (*connect_go.Response[v1.ListAggregateFoodItemsResponse], error) {
	return c.listAggregateFoodItems.CallUnary(ctx, req)
}

// CreateTypology calls neutral_diet.food.v1.FoodService.CreateTypology.
func (c *foodServiceClient) CreateTypology(ctx context.Context, req *connect_go.Request[v1.CreateTypologyRequest]) (*connect_go.Response[v1.CreateTypologyResponse], error) {
	return c.createTypology.CallUnary(ctx, req)
}

// CreateSource calls neutral_diet.food.v1.FoodService.CreateSource.
func (c *foodServiceClient) CreateSource(ctx context.Context, req *connect_go.Request[v1.CreateSourceRequest]) (*connect_go.Response[v1.CreateSourceResponse], error) {
	return c.createSource.CallUnary(ctx, req)
}

// FoodServiceHandler is an implementation of the neutral_diet.food.v1.FoodService service.
type FoodServiceHandler interface {
	CreateFoodItem(context.Context, *connect_go.Request[v1.CreateFoodItemRequest]) (*connect_go.Response[v1.CreateFoodItemResponse], error)
	ListFoodItems(context.Context, *connect_go.Request[v1.ListFoodItemsRequest]) (*connect_go.Response[v1.ListFoodItemsResponse], error)
	ListAggregateFoodItems(context.Context, *connect_go.Request[v1.ListAggregateFoodItemsRequest]) (*connect_go.Response[v1.ListAggregateFoodItemsResponse], error)
	CreateTypology(context.Context, *connect_go.Request[v1.CreateTypologyRequest]) (*connect_go.Response[v1.CreateTypologyResponse], error)
	CreateSource(context.Context, *connect_go.Request[v1.CreateSourceRequest]) (*connect_go.Response[v1.CreateSourceResponse], error)
}

// NewFoodServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFoodServiceHandler(svc FoodServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/neutral_diet.food.v1.FoodService/CreateFoodItem", connect_go.NewUnaryHandler(
		"/neutral_diet.food.v1.FoodService/CreateFoodItem",
		svc.CreateFoodItem,
		opts...,
	))
	mux.Handle("/neutral_diet.food.v1.FoodService/ListFoodItems", connect_go.NewUnaryHandler(
		"/neutral_diet.food.v1.FoodService/ListFoodItems",
		svc.ListFoodItems,
		opts...,
	))
	mux.Handle("/neutral_diet.food.v1.FoodService/ListAggregateFoodItems", connect_go.NewUnaryHandler(
		"/neutral_diet.food.v1.FoodService/ListAggregateFoodItems",
		svc.ListAggregateFoodItems,
		opts...,
	))
	mux.Handle("/neutral_diet.food.v1.FoodService/CreateTypology", connect_go.NewUnaryHandler(
		"/neutral_diet.food.v1.FoodService/CreateTypology",
		svc.CreateTypology,
		opts...,
	))
	mux.Handle("/neutral_diet.food.v1.FoodService/CreateSource", connect_go.NewUnaryHandler(
		"/neutral_diet.food.v1.FoodService/CreateSource",
		svc.CreateSource,
		opts...,
	))
	return "/neutral_diet.food.v1.FoodService/", mux
}

// UnimplementedFoodServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFoodServiceHandler struct{}

func (UnimplementedFoodServiceHandler) CreateFoodItem(context.Context, *connect_go.Request[v1.CreateFoodItemRequest]) (*connect_go.Response[v1.CreateFoodItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neutral_diet.food.v1.FoodService.CreateFoodItem is not implemented"))
}

func (UnimplementedFoodServiceHandler) ListFoodItems(context.Context, *connect_go.Request[v1.ListFoodItemsRequest]) (*connect_go.Response[v1.ListFoodItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neutral_diet.food.v1.FoodService.ListFoodItems is not implemented"))
}

func (UnimplementedFoodServiceHandler) ListAggregateFoodItems(context.Context, *connect_go.Request[v1.ListAggregateFoodItemsRequest]) (*connect_go.Response[v1.ListAggregateFoodItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neutral_diet.food.v1.FoodService.ListAggregateFoodItems is not implemented"))
}

func (UnimplementedFoodServiceHandler) CreateTypology(context.Context, *connect_go.Request[v1.CreateTypologyRequest]) (*connect_go.Response[v1.CreateTypologyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neutral_diet.food.v1.FoodService.CreateTypology is not implemented"))
}

func (UnimplementedFoodServiceHandler) CreateSource(context.Context, *connect_go.Request[v1.CreateSourceRequest]) (*connect_go.Response[v1.CreateSourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neutral_diet.food.v1.FoodService.CreateSource is not implemented"))
}
