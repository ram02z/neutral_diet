// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: neutral_diet/food/v1/api.proto

package foodv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateLifeCycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLifeCycleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLifeCycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLifeCycleRequestMultiError, or nil if none found.
func (m *CreateLifeCycleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLifeCycleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLifeCycle() == nil {
		err := CreateLifeCycleRequestValidationError{
			field:  "LifeCycle",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLifeCycle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLifeCycleRequestValidationError{
					field:  "LifeCycle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLifeCycleRequestValidationError{
					field:  "LifeCycle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLifeCycle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLifeCycleRequestValidationError{
				field:  "LifeCycle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLifeCycleRequestMultiError(errors)
	}

	return nil
}

// CreateLifeCycleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLifeCycleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLifeCycleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLifeCycleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLifeCycleRequestMultiError) AllErrors() []error { return m }

// CreateLifeCycleRequestValidationError is the validation error returned by
// CreateLifeCycleRequest.Validate if the designated constraints aren't met.
type CreateLifeCycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLifeCycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLifeCycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLifeCycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLifeCycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLifeCycleRequestValidationError) ErrorName() string {
	return "CreateLifeCycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLifeCycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLifeCycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLifeCycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLifeCycleRequestValidationError{}

// Validate checks the field values on CreateLifeCycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLifeCycleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLifeCycleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLifeCycleResponseMultiError, or nil if none found.
func (m *CreateLifeCycleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLifeCycleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateLifeCycleResponseMultiError(errors)
	}

	return nil
}

// CreateLifeCycleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLifeCycleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLifeCycleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLifeCycleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLifeCycleResponseMultiError) AllErrors() []error { return m }

// CreateLifeCycleResponseValidationError is the validation error returned by
// CreateLifeCycleResponse.Validate if the designated constraints aren't met.
type CreateLifeCycleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLifeCycleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLifeCycleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLifeCycleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLifeCycleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLifeCycleResponseValidationError) ErrorName() string {
	return "CreateLifeCycleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLifeCycleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLifeCycleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLifeCycleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLifeCycleResponseValidationError{}

// Validate checks the field values on CreateFoodItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFoodItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFoodItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFoodItemRequestMultiError, or nil if none found.
func (m *CreateFoodItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFoodItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFoodItem() == nil {
		err := CreateFoodItemRequestValidationError{
			field:  "FoodItem",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFoodItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFoodItemRequestValidationError{
					field:  "FoodItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFoodItemRequestValidationError{
					field:  "FoodItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFoodItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFoodItemRequestValidationError{
				field:  "FoodItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFoodItemRequestMultiError(errors)
	}

	return nil
}

// CreateFoodItemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFoodItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFoodItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFoodItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFoodItemRequestMultiError) AllErrors() []error { return m }

// CreateFoodItemRequestValidationError is the validation error returned by
// CreateFoodItemRequest.Validate if the designated constraints aren't met.
type CreateFoodItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFoodItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFoodItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFoodItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFoodItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFoodItemRequestValidationError) ErrorName() string {
	return "CreateFoodItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFoodItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFoodItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFoodItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFoodItemRequestValidationError{}

// Validate checks the field values on CreateFoodItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFoodItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFoodItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFoodItemResponseMultiError, or nil if none found.
func (m *CreateFoodItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFoodItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateFoodItemResponseMultiError(errors)
	}

	return nil
}

// CreateFoodItemResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFoodItemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateFoodItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFoodItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFoodItemResponseMultiError) AllErrors() []error { return m }

// CreateFoodItemResponseValidationError is the validation error returned by
// CreateFoodItemResponse.Validate if the designated constraints aren't met.
type CreateFoodItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFoodItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFoodItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFoodItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFoodItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFoodItemResponseValidationError) ErrorName() string {
	return "CreateFoodItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFoodItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFoodItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFoodItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFoodItemResponseValidationError{}

// Validate checks the field values on CreateTypologyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTypologyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTypologyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTypologyRequestMultiError, or nil if none found.
func (m *CreateTypologyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTypologyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTypology() == nil {
		err := CreateTypologyRequestValidationError{
			field:  "Typology",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTypology()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTypologyRequestValidationError{
					field:  "Typology",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTypologyRequestValidationError{
					field:  "Typology",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTypology()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTypologyRequestValidationError{
				field:  "Typology",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTypologyRequestMultiError(errors)
	}

	return nil
}

// CreateTypologyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTypologyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTypologyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTypologyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTypologyRequestMultiError) AllErrors() []error { return m }

// CreateTypologyRequestValidationError is the validation error returned by
// CreateTypologyRequest.Validate if the designated constraints aren't met.
type CreateTypologyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTypologyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTypologyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTypologyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTypologyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTypologyRequestValidationError) ErrorName() string {
	return "CreateTypologyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTypologyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTypologyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTypologyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTypologyRequestValidationError{}

// Validate checks the field values on CreateTypologyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTypologyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTypologyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTypologyResponseMultiError, or nil if none found.
func (m *CreateTypologyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTypologyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTypologyResponseMultiError(errors)
	}

	return nil
}

// CreateTypologyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTypologyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTypologyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTypologyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTypologyResponseMultiError) AllErrors() []error { return m }

// CreateTypologyResponseValidationError is the validation error returned by
// CreateTypologyResponse.Validate if the designated constraints aren't met.
type CreateTypologyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTypologyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTypologyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTypologyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTypologyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTypologyResponseValidationError) ErrorName() string {
	return "CreateTypologyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTypologyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTypologyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTypologyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTypologyResponseValidationError{}

// Validate checks the field values on ListTypologyNamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTypologyNamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTypologyNamesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTypologyNamesRequestMultiError, or nil if none found.
func (m *ListTypologyNamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTypologyNamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTypologyNamesRequestMultiError(errors)
	}

	return nil
}

// ListTypologyNamesRequestMultiError is an error wrapping multiple validation
// errors returned by ListTypologyNamesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTypologyNamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTypologyNamesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTypologyNamesRequestMultiError) AllErrors() []error { return m }

// ListTypologyNamesRequestValidationError is the validation error returned by
// ListTypologyNamesRequest.Validate if the designated constraints aren't met.
type ListTypologyNamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTypologyNamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTypologyNamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTypologyNamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTypologyNamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTypologyNamesRequestValidationError) ErrorName() string {
	return "ListTypologyNamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTypologyNamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTypologyNamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTypologyNamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTypologyNamesRequestValidationError{}

// Validate checks the field values on ListTypologyNamesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTypologyNamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTypologyNamesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTypologyNamesResponseMultiError, or nil if none found.
func (m *ListTypologyNamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTypologyNamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTypologyNamesResponseMultiError(errors)
	}

	return nil
}

// ListTypologyNamesResponseMultiError is an error wrapping multiple validation
// errors returned by ListTypologyNamesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListTypologyNamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTypologyNamesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTypologyNamesResponseMultiError) AllErrors() []error { return m }

// ListTypologyNamesResponseValidationError is the validation error returned by
// ListTypologyNamesResponse.Validate if the designated constraints aren't met.
type ListTypologyNamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTypologyNamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTypologyNamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTypologyNamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTypologyNamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTypologyNamesResponseValidationError) ErrorName() string {
	return "ListTypologyNamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTypologyNamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTypologyNamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTypologyNamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTypologyNamesResponseValidationError{}

// Validate checks the field values on CreateSubTypologyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubTypologyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubTypologyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubTypologyRequestMultiError, or nil if none found.
func (m *CreateSubTypologyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubTypologyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSubTypology() == nil {
		err := CreateSubTypologyRequestValidationError{
			field:  "SubTypology",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSubTypology()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubTypologyRequestValidationError{
					field:  "SubTypology",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubTypologyRequestValidationError{
					field:  "SubTypology",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubTypology()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubTypologyRequestValidationError{
				field:  "SubTypology",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSubTypologyRequestMultiError(errors)
	}

	return nil
}

// CreateSubTypologyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubTypologyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubTypologyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubTypologyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubTypologyRequestMultiError) AllErrors() []error { return m }

// CreateSubTypologyRequestValidationError is the validation error returned by
// CreateSubTypologyRequest.Validate if the designated constraints aren't met.
type CreateSubTypologyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubTypologyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubTypologyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubTypologyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubTypologyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubTypologyRequestValidationError) ErrorName() string {
	return "CreateSubTypologyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubTypologyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubTypologyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubTypologyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubTypologyRequestValidationError{}

// Validate checks the field values on CreateSubTypologyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubTypologyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubTypologyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubTypologyResponseMultiError, or nil if none found.
func (m *CreateSubTypologyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubTypologyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateSubTypologyResponseMultiError(errors)
	}

	return nil
}

// CreateSubTypologyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSubTypologyResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateSubTypologyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubTypologyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubTypologyResponseMultiError) AllErrors() []error { return m }

// CreateSubTypologyResponseValidationError is the validation error returned by
// CreateSubTypologyResponse.Validate if the designated constraints aren't met.
type CreateSubTypologyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubTypologyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubTypologyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubTypologyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubTypologyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubTypologyResponseValidationError) ErrorName() string {
	return "CreateSubTypologyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubTypologyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubTypologyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubTypologyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubTypologyResponseValidationError{}

// Validate checks the field values on ListSubTypologyNamesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubTypologyNamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubTypologyNamesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubTypologyNamesRequestMultiError, or nil if none found.
func (m *ListSubTypologyNamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubTypologyNamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSubTypologyNamesRequestMultiError(errors)
	}

	return nil
}

// ListSubTypologyNamesRequestMultiError is an error wrapping multiple
// validation errors returned by ListSubTypologyNamesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSubTypologyNamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubTypologyNamesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubTypologyNamesRequestMultiError) AllErrors() []error { return m }

// ListSubTypologyNamesRequestValidationError is the validation error returned
// by ListSubTypologyNamesRequest.Validate if the designated constraints
// aren't met.
type ListSubTypologyNamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubTypologyNamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubTypologyNamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubTypologyNamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubTypologyNamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubTypologyNamesRequestValidationError) ErrorName() string {
	return "ListSubTypologyNamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubTypologyNamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubTypologyNamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubTypologyNamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubTypologyNamesRequestValidationError{}

// Validate checks the field values on ListSubTypologyNamesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubTypologyNamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubTypologyNamesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubTypologyNamesResponseMultiError, or nil if none found.
func (m *ListSubTypologyNamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubTypologyNamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSubTypologyNamesResponseMultiError(errors)
	}

	return nil
}

// ListSubTypologyNamesResponseMultiError is an error wrapping multiple
// validation errors returned by ListSubTypologyNamesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSubTypologyNamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubTypologyNamesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubTypologyNamesResponseMultiError) AllErrors() []error { return m }

// ListSubTypologyNamesResponseValidationError is the validation error returned
// by ListSubTypologyNamesResponse.Validate if the designated constraints
// aren't met.
type ListSubTypologyNamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubTypologyNamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubTypologyNamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubTypologyNamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubTypologyNamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubTypologyNamesResponseValidationError) ErrorName() string {
	return "ListSubTypologyNamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubTypologyNamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubTypologyNamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubTypologyNamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubTypologyNamesResponseValidationError{}

// Validate checks the field values on CreateSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSourceRequestMultiError, or nil if none found.
func (m *CreateSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSource() == nil {
		err := CreateSourceRequestValidationError{
			field:  "Source",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSourceRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSourceRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSourceRequestValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSourceRequestMultiError(errors)
	}

	return nil
}

// CreateSourceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSourceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSourceRequestMultiError) AllErrors() []error { return m }

// CreateSourceRequestValidationError is the validation error returned by
// CreateSourceRequest.Validate if the designated constraints aren't met.
type CreateSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSourceRequestValidationError) ErrorName() string {
	return "CreateSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSourceRequestValidationError{}

// Validate checks the field values on CreateSourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSourceResponseMultiError, or nil if none found.
func (m *CreateSourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateSourceResponseMultiError(errors)
	}

	return nil
}

// CreateSourceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSourceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSourceResponseMultiError) AllErrors() []error { return m }

// CreateSourceResponseValidationError is the validation error returned by
// CreateSourceResponse.Validate if the designated constraints aren't met.
type CreateSourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSourceResponseValidationError) ErrorName() string {
	return "CreateSourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSourceResponseValidationError{}

// Validate checks the field values on ListAggregateFoodItemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAggregateFoodItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAggregateFoodItemsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAggregateFoodItemsRequestMultiError, or nil if none found.
func (m *ListAggregateFoodItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAggregateFoodItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Region_name[int32(m.GetRegion())]; !ok {
		err := ListAggregateFoodItemsRequestValidationError{
			field:  "Region",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAggregateFoodItemsRequestMultiError(errors)
	}

	return nil
}

// ListAggregateFoodItemsRequestMultiError is an error wrapping multiple
// validation errors returned by ListAggregateFoodItemsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListAggregateFoodItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAggregateFoodItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAggregateFoodItemsRequestMultiError) AllErrors() []error { return m }

// ListAggregateFoodItemsRequestValidationError is the validation error
// returned by ListAggregateFoodItemsRequest.Validate if the designated
// constraints aren't met.
type ListAggregateFoodItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregateFoodItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregateFoodItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregateFoodItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregateFoodItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregateFoodItemsRequestValidationError) ErrorName() string {
	return "ListAggregateFoodItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregateFoodItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregateFoodItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregateFoodItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregateFoodItemsRequestValidationError{}

// Validate checks the field values on ListAggregateFoodItemsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAggregateFoodItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAggregateFoodItemsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAggregateFoodItemsResponseMultiError, or nil if none found.
func (m *ListAggregateFoodItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAggregateFoodItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFoodItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAggregateFoodItemsResponseValidationError{
						field:  fmt.Sprintf("FoodItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAggregateFoodItemsResponseValidationError{
						field:  fmt.Sprintf("FoodItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAggregateFoodItemsResponseValidationError{
					field:  fmt.Sprintf("FoodItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAggregateFoodItemsResponseMultiError(errors)
	}

	return nil
}

// ListAggregateFoodItemsResponseMultiError is an error wrapping multiple
// validation errors returned by ListAggregateFoodItemsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListAggregateFoodItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAggregateFoodItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAggregateFoodItemsResponseMultiError) AllErrors() []error { return m }

// ListAggregateFoodItemsResponseValidationError is the validation error
// returned by ListAggregateFoodItemsResponse.Validate if the designated
// constraints aren't met.
type ListAggregateFoodItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregateFoodItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregateFoodItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregateFoodItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregateFoodItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregateFoodItemsResponseValidationError) ErrorName() string {
	return "ListAggregateFoodItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregateFoodItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregateFoodItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregateFoodItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregateFoodItemsResponseValidationError{}

// Validate checks the field values on GetFoodItemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFoodItemInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodItemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFoodItemInfoRequestMultiError, or nil if none found.
func (m *GetFoodItemInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodItemInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetFoodItemInfoRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Region_name[int32(m.GetRegion())]; !ok {
		err := GetFoodItemInfoRequestValidationError{
			field:  "Region",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFoodItemInfoRequestMultiError(errors)
	}

	return nil
}

// GetFoodItemInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetFoodItemInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFoodItemInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodItemInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodItemInfoRequestMultiError) AllErrors() []error { return m }

// GetFoodItemInfoRequestValidationError is the validation error returned by
// GetFoodItemInfoRequest.Validate if the designated constraints aren't met.
type GetFoodItemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodItemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodItemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodItemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodItemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodItemInfoRequestValidationError) ErrorName() string {
	return "GetFoodItemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFoodItemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodItemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodItemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodItemInfoRequestValidationError{}

// Validate checks the field values on GetFoodItemInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFoodItemInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFoodItemInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFoodItemInfoResponseMultiError, or nil if none found.
func (m *GetFoodItemInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFoodItemInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFoodItemInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFoodItemInfoResponseValidationError{
					field:  "FoodItemInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFoodItemInfoResponseValidationError{
					field:  "FoodItemInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFoodItemInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFoodItemInfoResponseValidationError{
				field:  "FoodItemInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFoodItemInfoResponseMultiError(errors)
	}

	return nil
}

// GetFoodItemInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetFoodItemInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFoodItemInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFoodItemInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFoodItemInfoResponseMultiError) AllErrors() []error { return m }

// GetFoodItemInfoResponseValidationError is the validation error returned by
// GetFoodItemInfoResponse.Validate if the designated constraints aren't met.
type GetFoodItemInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFoodItemInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFoodItemInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFoodItemInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFoodItemInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFoodItemInfoResponseValidationError) ErrorName() string {
	return "GetFoodItemInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFoodItemInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFoodItemInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFoodItemInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFoodItemInfoResponseValidationError{}
