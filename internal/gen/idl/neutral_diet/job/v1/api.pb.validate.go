// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: neutral_diet/job/v1/api.proto

package jobv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendGoalNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGoalNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGoalNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGoalNotificationsRequestMultiError, or nil if none found.
func (m *SendGoalNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGoalNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendGoalNotificationsRequestMultiError(errors)
	}

	return nil
}

// SendGoalNotificationsRequestMultiError is an error wrapping multiple
// validation errors returned by SendGoalNotificationsRequest.ValidateAll() if
// the designated constraints aren't met.
type SendGoalNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGoalNotificationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGoalNotificationsRequestMultiError) AllErrors() []error { return m }

// SendGoalNotificationsRequestValidationError is the validation error returned
// by SendGoalNotificationsRequest.Validate if the designated constraints
// aren't met.
type SendGoalNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGoalNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGoalNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGoalNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGoalNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGoalNotificationsRequestValidationError) ErrorName() string {
	return "SendGoalNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGoalNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGoalNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGoalNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGoalNotificationsRequestValidationError{}

// Validate checks the field values on SendGoalNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGoalNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGoalNotificationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendGoalNotificationsResponseMultiError, or nil if none found.
func (m *SendGoalNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGoalNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendGoalNotificationsResponseMultiError(errors)
	}

	return nil
}

// SendGoalNotificationsResponseMultiError is an error wrapping multiple
// validation errors returned by SendGoalNotificationsResponse.ValidateAll()
// if the designated constraints aren't met.
type SendGoalNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGoalNotificationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGoalNotificationsResponseMultiError) AllErrors() []error { return m }

// SendGoalNotificationsResponseValidationError is the validation error
// returned by SendGoalNotificationsResponse.Validate if the designated
// constraints aren't met.
type SendGoalNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGoalNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGoalNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGoalNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGoalNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGoalNotificationsResponseValidationError) ErrorName() string {
	return "SendGoalNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGoalNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGoalNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGoalNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGoalNotificationsResponseValidationError{}

// Validate checks the field values on MarkCompletedGoalsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarkCompletedGoalsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkCompletedGoalsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkCompletedGoalsRequestMultiError, or nil if none found.
func (m *MarkCompletedGoalsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkCompletedGoalsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarkCompletedGoalsRequestMultiError(errors)
	}

	return nil
}

// MarkCompletedGoalsRequestMultiError is an error wrapping multiple validation
// errors returned by MarkCompletedGoalsRequest.ValidateAll() if the
// designated constraints aren't met.
type MarkCompletedGoalsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkCompletedGoalsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkCompletedGoalsRequestMultiError) AllErrors() []error { return m }

// MarkCompletedGoalsRequestValidationError is the validation error returned by
// MarkCompletedGoalsRequest.Validate if the designated constraints aren't met.
type MarkCompletedGoalsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkCompletedGoalsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkCompletedGoalsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkCompletedGoalsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkCompletedGoalsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkCompletedGoalsRequestValidationError) ErrorName() string {
	return "MarkCompletedGoalsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MarkCompletedGoalsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkCompletedGoalsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkCompletedGoalsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkCompletedGoalsRequestValidationError{}

// Validate checks the field values on MarkCompletedGoalsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarkCompletedGoalsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkCompletedGoalsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkCompletedGoalsResponseMultiError, or nil if none found.
func (m *MarkCompletedGoalsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkCompletedGoalsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarkCompletedGoalsResponseMultiError(errors)
	}

	return nil
}

// MarkCompletedGoalsResponseMultiError is an error wrapping multiple
// validation errors returned by MarkCompletedGoalsResponse.ValidateAll() if
// the designated constraints aren't met.
type MarkCompletedGoalsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkCompletedGoalsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkCompletedGoalsResponseMultiError) AllErrors() []error { return m }

// MarkCompletedGoalsResponseValidationError is the validation error returned
// by MarkCompletedGoalsResponse.Validate if the designated constraints aren't met.
type MarkCompletedGoalsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkCompletedGoalsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkCompletedGoalsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkCompletedGoalsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkCompletedGoalsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkCompletedGoalsResponseValidationError) ErrorName() string {
	return "MarkCompletedGoalsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MarkCompletedGoalsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkCompletedGoalsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkCompletedGoalsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkCompletedGoalsResponseValidationError{}

// Validate checks the field values on SendStreakNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendStreakNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStreakNotificationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendStreakNotificationsRequestMultiError, or nil if none found.
func (m *SendStreakNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStreakNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendStreakNotificationsRequestMultiError(errors)
	}

	return nil
}

// SendStreakNotificationsRequestMultiError is an error wrapping multiple
// validation errors returned by SendStreakNotificationsRequest.ValidateAll()
// if the designated constraints aren't met.
type SendStreakNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStreakNotificationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStreakNotificationsRequestMultiError) AllErrors() []error { return m }

// SendStreakNotificationsRequestValidationError is the validation error
// returned by SendStreakNotificationsRequest.Validate if the designated
// constraints aren't met.
type SendStreakNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStreakNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStreakNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStreakNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStreakNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStreakNotificationsRequestValidationError) ErrorName() string {
	return "SendStreakNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendStreakNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStreakNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStreakNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStreakNotificationsRequestValidationError{}

// Validate checks the field values on SendStreakNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendStreakNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStreakNotificationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendStreakNotificationsResponseMultiError, or nil if none found.
func (m *SendStreakNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStreakNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendStreakNotificationsResponseMultiError(errors)
	}

	return nil
}

// SendStreakNotificationsResponseMultiError is an error wrapping multiple
// validation errors returned by SendStreakNotificationsResponse.ValidateAll()
// if the designated constraints aren't met.
type SendStreakNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStreakNotificationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStreakNotificationsResponseMultiError) AllErrors() []error { return m }

// SendStreakNotificationsResponseValidationError is the validation error
// returned by SendStreakNotificationsResponse.Validate if the designated
// constraints aren't met.
type SendStreakNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStreakNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStreakNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStreakNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStreakNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStreakNotificationsResponseValidationError) ErrorName() string {
	return "SendStreakNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendStreakNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStreakNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStreakNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStreakNotificationsResponseValidationError{}
