// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: device.sql

package db

import (
	"context"
)

const addDevice = `-- name: AddDevice :exec
INSERT INTO "device" (user_id, fcm_token)
    VALUES ($1, $2)
ON CONFLICT (fcm_token)
    DO UPDATE SET
        user_id = $1
`

type AddDeviceParams struct {
	UserID   int32
	FcmToken string
}

func (q *Queries) AddDevice(ctx context.Context, arg AddDeviceParams) error {
	_, err := q.db.Exec(ctx, addDevice, arg.UserID, arg.FcmToken)
	return err
}

const deleteDeviceByUser = `-- name: DeleteDeviceByUser :exec
DELETE FROM "device"
WHERE user_id = $1
`

func (q *Queries) DeleteDeviceByUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteDeviceByUser, userID)
	return err
}

const getDevices = `-- name: GetDevices :many
SELECT
    id, user_id, fcm_token
FROM
    "device"
`

func (q *Queries) GetDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(&i.ID, &i.UserID, &i.FcmToken); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
