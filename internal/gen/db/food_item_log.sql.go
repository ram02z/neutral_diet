// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: food_item_log.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const addFoodItemToLog = `-- name: AddFoodItemToLog :one
INSERT INTO "food_item_log" (food_item_id, weight, carbon_footprint, user_id, log_date)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id
`

type AddFoodItemToLogParams struct {
	FoodItemID      int32
	Weight          decimal.Decimal
	CarbonFootprint decimal.Decimal
	UserID          int32
	LogDate         pgtype.Date
}

func (q *Queries) AddFoodItemToLog(ctx context.Context, arg AddFoodItemToLogParams) (int32, error) {
	row := q.db.QueryRow(ctx, addFoodItemToLog,
		arg.FoodItemID,
		arg.Weight,
		arg.CarbonFootprint,
		arg.UserID,
		arg.LogDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteFoodItemFromLog = `-- name: DeleteFoodItemFromLog :exec
DELETE FROM "food_item_log"
WHERE user_id = $1
    AND id = $2
`

type DeleteFoodItemFromLogParams struct {
	UserID int32
	ID     int32
}

func (q *Queries) DeleteFoodItemFromLog(ctx context.Context, arg DeleteFoodItemFromLogParams) error {
	_, err := q.db.Exec(ctx, deleteFoodItemFromLog, arg.UserID, arg.ID)
	return err
}

const deleteUserLog = `-- name: DeleteUserLog :exec
DELETE FROM "food_item_log"
WHERE user_id = $1
`

func (q *Queries) DeleteUserLog(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserLog, userID)
	return err
}

const getFoodItemLogByDate = `-- name: GetFoodItemLogByDate :many
SELECT
    id, food_item_id, weight, carbon_footprint, created_at, updated_at, user_id, log_date
FROM
    "food_item_log"
WHERE
    user_id = $1 AND log_date = $2
`

type GetFoodItemLogByDateParams struct {
	UserID  int32
	LogDate pgtype.Date
}

func (q *Queries) GetFoodItemLogByDate(ctx context.Context, arg GetFoodItemLogByDateParams) ([]FoodItemLog, error) {
	rows, err := q.db.Query(ctx, getFoodItemLogByDate, arg.UserID, arg.LogDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FoodItemLog
	for rows.Next() {
		var i FoodItemLog
		if err := rows.Scan(
			&i.ID,
			&i.FoodItemID,
			&i.Weight,
			&i.CarbonFootprint,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.LogDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
