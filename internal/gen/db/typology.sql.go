// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: typology.sql

package db

import (
	"context"
)

const createTypology = `-- name: CreateTypology :one
INSERT INTO typology (name, sub_typology_id)
    VALUES ($1, $2)
RETURNING
    id
`

type CreateTypologyParams struct {
	Name          string
	SubTypologyID *int32
}

func (q *Queries) CreateTypology(ctx context.Context, arg CreateTypologyParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTypology, arg.Name, arg.SubTypologyID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listTypologies = `-- name: ListTypologies :many
SELECT id, name, sub_typology_id FROM typology
`

func (q *Queries) ListTypologies(ctx context.Context) ([]Typology, error) {
	rows, err := q.db.Query(ctx, listTypologies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Typology
	for rows.Next() {
		var i Typology
		if err := rows.Scan(&i.ID, &i.Name, &i.SubTypologyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
